use std::{str::FromStr, rc::Rc};
use crate::ast::*;

grammar;

pub Program: Program<Expr> = {
    Declaration* => Program::new(<>)
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Block: Block<Expr> = {
    "{" <s:BlockItem*> "}" => Block::new(s)
}

BlockItem: BlockItem<Expr> = {
    Statement => BlockItem::Statement(<>),
    Declaration => BlockItem::Declaration(<>)
}

Statement: Statement<Expr> = {
    OpenStatement => <>,
    ClosedStatement => <>,
};

OpenStatement: Statement<Expr> = {
    "if" "(" <c:Expr> ")" <t:Statement> => Statement::If(c, Box::new((t, None))),
    "if" "(" <c:Expr> ")" <t:ClosedStatement> "else" <e:OpenStatement> => Statement::If(c, Box::new((t, Some(e)))),
    "while" "(" <cond:Expr> ")" <s:OpenStatement> => Statement::While(cond, Box::new(s), 0),
    "do" <s:OpenStatement> "while" "(" <cond:Expr> ")" ";" => Statement::DoWhile(cond, Box::new(s), 0),

    "for" "(" <init:ForInit> <cond:Expr?> ";" <post:Expr?> ")" <stmt:OpenStatement> => Statement::For { init, cond, post, body: Box::new(stmt), label: 0 },
}

ClosedStatement: Statement<Expr> = {
    NormalStatement => <>,
    "if" "(" <c:Expr> ")" <t:ClosedStatement> "else" <e:ClosedStatement> => Statement::If(c, Box::new((t, Some(e)))),
    "while" "(" <cond:Expr> ")" <s:ClosedStatement> => Statement::While(cond, Box::new(s), 0),
    "do" <s:ClosedStatement> "while" "(" <cond:Expr> ")" ";" => Statement::DoWhile(cond, Box::new(s), 0),

    "for" "(" <init:ForInit> <cond:Expr?> ";" <post:Expr?> ")" <stmt:ClosedStatement> => Statement::For { init, cond, post, body: Box::new(stmt), label: 0 },
}

NormalStatement: Statement<Expr> = {
    "return" <e:Expr> ";" => Statement::Return(e),
    <e:Expr> ";" => Statement::Expr(e),
    Block => Statement::Block(<>),
    "break" ";" => Statement::Break(0),
    "continue" ";" => Statement::Continue(0),
}

ForInit: ForInit<Expr> = {
    Declaration => {
        match <> {
            Declaration::Var(v) => ForInit::Decl(v),
            Declaration::Fn(_) => panic!("Cannot have a function declaration inside a for loop")
        }
    },
    <e:Expr> ";" => ForInit::Expr(e),
    ";" => ForInit::None,
}

Specifier: Specifier = {
    "extern"   => Specifier::Extern,
    "static"   => Specifier::Static,
    "int"      => Specifier::Int,
    "unsigned" => Specifier::Unsigned,
};

Type: Type = {
    <spec_list:SpecifierList> => {
        let mut types = Vec::new();
        for spec in spec_list {
            match spec {
                Specifier::Extern |
                Specifier::Static => {
                    panic!("Didn't expect an storage class specifiers here... only types....");
                },

                Specifier::Int         |
                Specifier::Signed      |
                Specifier::Unsigned => {
                    types.push(spec);
                },
            }
        }

        return Type::from_specifiers(types)
    }
}

TypeAndStorageClass: (Type, Option<StorageClass>) = {
    <spec_list:SpecifierList> => {
        let mut types = Vec::new();
        let mut storage_class = None;
        for spec in spec_list {
            match spec {
                Specifier::Extern => {
                    if storage_class.is_some() { panic!("Cannot have more than one storage class!!!!"); }
                    storage_class = Some(StorageClass::Extern);
                },
                Specifier::Static => {
                    if storage_class.is_some() { panic!("Cannot have more than one storage class!!!!"); }
                    storage_class = Some(StorageClass::Static);
                },

                Specifier::Int         |
                Specifier::Signed      |
                Specifier::Unsigned => {
                    types.push(spec);
                },
            }
        }

        let ty = Type::from_specifiers(types);

        return (ty, storage_class)
    }
};

SimpleDeclarator: Declarator = {
    Ident => Declarator::Ident(<>),
    "(" <Declarator> ")" => <>
};

DirectDeclarator: Declarator = {
    SimpleDeclarator => <>,
    <d: SimpleDeclarator> <p: ParamList> => Declarator::Fn(p, Box::new(d)),
    <d: SimpleDeclarator> <arrs:ArrayDeclLen+> => {
        let mut decl = Declarator::Array(Box::new(d), arrs[0]);
        for n in arrs.into_iter().skip(1) {
            decl = Declarator::Array(Box::new(decl), n);
        }
        decl
    }
};

Declarator: Declarator = {
    "*" <Declarator> => Declarator::Pointer(Box::new(<>)),
    DirectDeclarator => <>,
};

ParamList: Vec<ParamInfo> = {
    "(" "void" ")" => Vec::new(),
    "(" <Comma<Param>> ")" => <>
};

Param: ParamInfo = {
    <t:Type> <d:Declarator> => ParamInfo::new(t, d)
};

Declaration: Declaration<Expr> = {
    <VarDeclWVal> => Declaration::Var(<>),
    <tas:TypeAndStorageClass> <d:Declarator> <block:Block> => {
        let ty = tas.0;
        let storage_class = tas.1;
        let (name, ty, param_names) = d.process(ty);
        
        if let Type::Fn { params, ret_ty } = ty {
            let params = params.into_iter().zip(param_names).collect();

            Declaration::Fn(FunctionDecl::new(name, *ret_ty, params, Some(block), storage_class))
        } else {
            panic!("Variable cannot have a block")
        }
    },
    <tas:TypeAndStorageClass> <d:Declarator> ";" => {
        let ty = tas.0;
        let storage_class = tas.1;
        let (name, ty, param_names) = d.process(ty);
        
        if let Type::Fn { params, ret_ty } = ty {
            let params = params.into_iter().zip(param_names).collect();

            Declaration::Fn(FunctionDecl::new(name, *ret_ty, params, None, storage_class))
        } else {
            Declaration::Var(VarDeclaration::new(name, ty, None, storage_class))
        }
    }
};

VarDeclWVal: VarDeclaration<Expr> = {
    <tas:TypeAndStorageClass> <d:Declarator> "=" <e:Initializer> ";" => {
        let ty = tas.0;
        let storage_class = tas.1;
        let (name, ty, param_names) = d.process(ty);
        
        if matches!(ty, Type::Fn { .. }) {
            panic!("Cannot assign to a variable")
        } else {
            VarDeclaration::new(name, ty, Some(e), storage_class)
        }
    }
};

Initializer: Initializer<Expr> = {
    <Expr> => Initializer::Single(<>),
    "{" <Comma<Initializer>> "}" => Initializer::Compound(<>),
};

SpecifierList: Vec<Specifier> = {
    Specifier+ => <>
}

Expr: Expr = {
    Expr14 => <>,
};

Expr14: Expr = {
    <l:Expr13> <o:Assign> <r:Expr14> => Expr::new(DefaultExpr::Binary(BinOp::Assign(o),Box::new((l,r)))),
    Expr13 => <>,
};

Expr13: Expr = {
    <cond:Expr13> "?" <t:Expr> ":" <e:Expr12> => Expr::new(DefaultExpr::Ternary(Box::new((cond,t,e)))),
    Expr12,
};

Expr12: Expr = {
    <l:Expr12> "||" <r:Expr11> => Expr::new(DefaultExpr::Binary(BinOp::Or,Box::new((l,r)))),
    Expr11,
};

Expr11: Expr = {
    <l:Expr11> "&&" <r:Expr10> => Expr::new(DefaultExpr::Binary(BinOp::And,Box::new((l,r)))),
    Expr10,
};

Expr10: Expr = {
    <l:Expr10> "|" <r:Expr9> => Expr::new(DefaultExpr::Binary(BinOp::BitwiseOr,Box::new((l,r)))),
    Expr9,
};

Expr9: Expr = {
    <l:Expr9> "^" <r:Expr8> => Expr::new(DefaultExpr::Binary(BinOp::BitwiseXor,Box::new((l,r)))),
    Expr8,
};

Expr8: Expr = {
    <l:Expr8> "&" <r:Expr7> => Expr::new(DefaultExpr::Binary(BinOp::BitwiseAnd,Box::new((l,r)))),
    Expr7,
};

Expr7: Expr = {
    <l:Expr7> <o:BinOpEqs> <r:Expr6> => Expr::new(DefaultExpr::Binary(o,Box::new((l,r)))),
    Expr6,
};

Expr6: Expr = {
    <l:Expr6> <o:BinOpCmps> <r:Expr5> => Expr::new(DefaultExpr::Binary(o,Box::new((l,r)))),
    Expr5,
};

Expr5: Expr = {
    <l:Expr5> <o:BinOpShifts> <r:Expr4> => Expr::new(DefaultExpr::Binary(o,Box::new((l,r)))),
    Expr4,
};

Expr4: Expr = {
    <l:Expr4> <o:BinOpAddSub> <r:Expr3> => Expr::new(DefaultExpr::Binary(o,Box::new((l,r)))),
    Expr3,
};

Expr3: Expr = {
    <l:Expr3> <o:BinOpMulDivMod> <r:Expr2> => Expr::new(DefaultExpr::Binary(o,Box::new((l,r)))),
    Expr2,
};

Expr2: Expr = {
    Expr1,
};

Expr1: Expr = {
    Expr0,
}

Expr0: Expr = {
    UnaryTerm,
};

BinOpMulDivMod: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
    "%" => BinOp::Mod,
};

BinOpAddSub: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
};

BinOpShifts: BinOp = {
    "<<" => BinOp::LeftShift,
    ">>" => BinOp::RightShift,
};

BinOpCmps: BinOp = {
    "<" => BinOp::LessThan,
    ">" => BinOp::GreaterThan,
    "<=" => BinOp::LessThanEqual,
    ">=" => BinOp::GreaterThanEqual,
};

BinOpEqs: BinOp = {
    "==" => BinOp::Equal,
    "!=" => BinOp::NotEqual
};

Assign: AssignType = {
    "=" => AssignType::Normal,
    "+=" => AssignType::Add,
    "-=" => AssignType::Sub,
    "*=" => AssignType::Mul,
    "/=" => AssignType::Div,
    "%=" => AssignType::Mod,
    "<<=" => AssignType::LeftShift,
    ">>=" => AssignType::RightShift,
    "&=" => AssignType::BitwiseAnd,
    "|=" => AssignType::BitwiseOr,
    "^=" => AssignType::BitwiseXor
}

UnaryTerm: Expr = {
    "(" <t:Type> <d:AbstractDeclarator?> ")" <e: UnaryTerm> => {
        let ty = if let Some(d) = d { d.process(t) } else { t };
        Expr::new(DefaultExpr::Cast(ty, Box::new(e)))
    },
    "+" <UnaryTerm> => <>,
    <o:UnOp> <t: UnaryTerm> => Expr::new(DefaultExpr::Unary(o, Box::new(t))),
    PostfixTerm => <>,
};

PostfixTerm: Expr = {
    PrimaryTerm => <>,
    <t:PrimaryTerm> <subs:("[" <Expr> "]")+> => {
        let mut expr = Expr::new(DefaultExpr::Subscript(Box::new((t, subs[0].clone()))));
        for sub in subs.into_iter().skip(1) {
            expr = Expr::new(DefaultExpr::Subscript(Box::new((expr, sub))));
        }
        expr
    },
};

PrimaryTerm: Expr = {
    <Const> => Expr::new(DefaultExpr::Constant(<>)),
    "(" <Expr> ")",
    Ident => Expr::new(DefaultExpr::Var(<>)),
    <n:Ident> "(" <p:Comma<Expr>> ")" => Expr::new(DefaultExpr::FunctionCall(n, p)),
};

UnOp: UnOp = {
    "-" => UnOp::Negate,
    "~" => UnOp::Complement,
    "!" => UnOp::Not,
    "*" => UnOp::Dereference,
    "&" => UnOp::AddressOf,
};

AbstractDeclarator: AbstractDeclarator = {
    "*" <AbstractDeclarator?> => {
        let decl = if let Some(d) = <> { d } else { AbstractDeclarator::Base };
        AbstractDeclarator::Pointer(Box::new(decl))
    },
    DirectAbstractDeclarator => <>,
};

DirectAbstractDeclarator: AbstractDeclarator = {
    "(" <AbstractDeclarator> ")" => <>,
    "(" <d:AbstractDeclarator> ")" "[" <n:ArrayDeclLen> "]" => AbstractDeclarator::Array(Box::new(d), n)
};

ArrayDeclLen: u16 = {
    "[" <Const> "]" => {
        match <> {
            Const::Int(n) => n as u16,
            Const::UInt(n) => n,
        }
    }
};

Const: Const = {
    Int => Const::Int(<>),
    UInt => Const::UInt(<>)
};

Int: i16 = {
    r"[0-9]+" => i16::from_str(<>).unwrap()
}

UInt: u16 = {
    r"[0-9]+[uU]" => {
        let l = <>.len();
        let n = &<>[..l-1];
        u16::from_str(n).unwrap()
    }
}

Ident: Ident = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => Rc::new(<>.to_string()),
}